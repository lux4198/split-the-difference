generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(100) @unique
  password String @db.VarChar(100)
  email String @db.VarChar(100)
  members   Member[]
  Expense   Expense[]
  payments Payment[]
}

model Member {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  groupId Int

  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expensesShared Expense[] @relation("MemberExpensesShared")
  expensesPayed Expense[] @relation("MemberExpensesPayed")

  paymentsFrom Payment[] @relation("memberFrom")
  paymentsTo Payment[] @relation("memberTo")
}

model Expense {
  id      Int     @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  name    String? @db.VarChar(255)
  type String? @db.VarChar(50)
  value   Float
  groupId Int
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)

  membersPaying Member[] @relation("MemberExpensesPayed")
  membersSharing Member[] @relation("MemberExpensesShared")
}

model Payment {
  id Int @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  value   Float

  fromId Int
  toId Int

  memberFrom Member @relation("memberFrom", fields : [fromId], references: [id], onDelete: Cascade)
  memberTo Member @relation("memberTo", fields : [toId], references: [id], onDelete: Cascade)

  groupId Int
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
